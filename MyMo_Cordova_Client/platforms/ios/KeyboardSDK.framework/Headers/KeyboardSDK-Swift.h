#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef KEYBOARDSDK_SWIFT_H
#define KEYBOARDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KeyboardSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

/// Keyboard toolbars are keyboard rows, that can be added to a
/// <code>KeyboardInputViewController</code>’s <code>keyboardStackView</code>.
/// This base class can be subclassed to create custom toolbars.
/// It has a horizontal stack view, that can be used to contain
/// any views you want.
SWIFT_CLASS("_TtC11KeyboardSDK15KeyboardToolbar")
@interface KeyboardToolbar : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// This toolbar can be used to present autocomplete suggestion
/// words while the user types.
/// Since the <code>buttonCreator</code> parameter can return any view for
/// any string, you can use this class to present any views you
/// want, given any custom list of words.
SWIFT_CLASS("_TtC11KeyboardSDK13AmountToolbar")
@interface AmountToolbar : KeyboardToolbar
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This is the default label that will be used by autocomplete
/// toolbars if no custom view builder is provided.
/// This is not a label, but a view that contains a scroll view
/// with an embedded, scrollable label, as well as a plan label
/// with centered content. The visibility of these views depend
/// on the amount of text and if the label needs scrolling.
/// <code>TODO</code> - Implement separator lines.
/// <code>TODO</code> - Implement horizontal blur.
SWIFT_CLASS("_TtC11KeyboardSDK18AmountToolbarLabel")
@interface AmountToolbarLabel : UIView
- (void)layoutSubviews;
- (void)sendAction;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




/// This toolbar can be used to present autocomplete suggestion
/// words while the user types.
/// Since the <code>buttonCreator</code> parameter can return any view for
/// any string, you can use this class to present any views you
/// want, given any custom list of words.
SWIFT_CLASS("_TtC11KeyboardSDK19AutocompleteToolbar")
@interface AutocompleteToolbar : KeyboardToolbar
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// This is the default label that will be used by autocomplete
/// toolbars if no custom view builder is provided.
/// This is not a label, but a view that contains a scroll view
/// with an embedded, scrollable label, as well as a plan label
/// with centered content. The visibility of these views depend
/// on the amount of text and if the label needs scrolling.
/// <code>TODO</code> - Implement separator lines.
/// <code>TODO</code> - Implement horizontal blur.
SWIFT_CLASS("_TtC11KeyboardSDK24AutocompleteToolbarLabel")
@interface AutocompleteToolbarLabel : UIView
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIWindow;

/// This class is added as<code>AutocompleteToolbarLabel</code> separators
/// to separate autocomplete labels.
/// The class has no logic of its own, but can be used to style
/// these view, using <code>AutocompleteToolbarSeparator.appearance</code>.
SWIFT_CLASS("_TtC11KeyboardSDK28AutocompleteToolbarSeparator")
@interface AutocompleteToolbarSeparator : UIView
- (void)willMoveToWindow:(UIWindow * _Nullable)window;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIButton;
@class UILabel;
@class UITableView;
@class NSString;
@class NSBundle;

SWIFT_CLASS("_TtC11KeyboardSDK21ContactViewController")
@interface ContactViewController : UIViewController
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified refreshButton;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified contactsLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified cancelContactListButton;
@property (nonatomic, weak) IBOutlet UITableView * _Null_unspecified contactListTableView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified pickContactNoLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified cancelContactPickListButton;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified contactDetailView;
@property (nonatomic, weak) IBOutlet UITableView * _Null_unspecified contactDetailsTableView;
- (void)viewDidLoad;
- (IBAction)refreshContactsWithSender:(UIButton * _Nonnull)sender;
- (IBAction)dismissContactViewControllerWithSender:(UIButton * _Nonnull)sender;
- (IBAction)dismissContactDetailViewWithSender:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSIndexPath;
@class UITableViewCell;

@interface ContactViewController (SWIFT_EXTENSION(KeyboardSDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)sectionIndexTitlesForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11KeyboardSDK21DemoAutocompleteLabel")
@interface DemoAutocompleteLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// This class implements <code>KeyboardButton</code> and can be used as a
/// base class for your app’s keyboard buttons.
SWIFT_CLASS("_TtC11KeyboardSDK18KeyboardButtonView")
@interface KeyboardButtonView : UIButton
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSLayoutConstraint;
@class UIImageView;

SWIFT_CLASS("_TtC11KeyboardSDK10DemoButton")
@interface DemoButton : KeyboardButtonView
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified leadingConstant;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified trailingConstant;
@property (nonatomic, weak) IBOutlet UIView * _Nullable buttonView;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable image;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable textLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used by default, if you do not apply a custom
/// action handler to your <code>KeyboardParentViewController</code>, by setting
/// <code>keyboardActionHandler</code> to a custom handler.
/// This handler uses the default actions when keyboard actions
/// are tapped, long pressed or repeated. You can adjust action
/// handling by It can be adjusted by
/// creating a subclass of this action handler and override the
/// <code>xAction(for:)</code> and <code>handleX(on:)</code> functions.
/// You can enable haptic feedback by providing haptic feedback
/// types for taps and long presses when you create an instance
/// of this class. You can also adjust the standard behavior by
/// overriding the two <code>giveHapticFeedbackForX()</code> functions.
/// IMPORTANT: This class must inherit <code>NSObject</code> to be able to
/// set itself as a target, e.g. when saving images to photos.
/// <code>TODO</code>: Test the haptic and audio configuration.
SWIFT_CLASS("_TtC11KeyboardSDK29StandardKeyboardActionHandler")
@interface StandardKeyboardActionHandler : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNotification;

SWIFT_CLASS("_TtC11KeyboardSDK25DemoKeyboardActionHandler")
@interface DemoKeyboardActionHandler : StandardKeyboardActionHandler
- (void)executeSendActionWithNotification:(NSNotification * _Nonnull)notification;
@end

@class UIImage;

@interface DemoKeyboardActionHandler (SWIFT_EXTENSION(KeyboardSDK))
- (void)handleImage:(UIImage * _Nonnull)image didFinishSavingWithError:(NSError * _Nullable)error contextInfo:(void const * _Nonnull)contextInfo;
@end








@class NSXMLParser;
@class NSData;

/// The implementation of XMLParserDelegate and where the parsing actually happens.
SWIFT_CLASS("_TtC11KeyboardSDK13FullXMLParser")
@interface FullXMLParser : NSObject <NSXMLParserDelegate>
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCDATA:(NSData * _Nonnull)CDATABlock;
- (void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11KeyboardSDK18HeaderCustomButton")
@interface HeaderCustomButton : UIButton
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11KeyboardSDK13HeaderToolbar")
@interface HeaderToolbar : KeyboardToolbar
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11KeyboardSDK17HeaderToolbarView")
@interface HeaderToolbarView : UIView
- (void)layoutSubviews;
- (void)sendActionWithSender:(HeaderCustomButton * _Nonnull)sender;
- (void)headerResetWithNotification:(NSNotification * _Nonnull)notification;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIDatePicker;

SWIFT_CLASS("_TtC11KeyboardSDK21HistoryViewController")
@interface HistoryViewController : UIViewController
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified topView;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified transactionListView;
@property (nonatomic, weak) IBOutlet UITableView * _Null_unspecified transactionTableView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified recordNotFoundLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified showDateButton;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified loadMoreButton;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified transactionDetailsView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified receiverPhoneNoTitleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified receiverPhoneNoLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified receiverNameTitleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified receiverNameLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified transactionIDTitleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified transactionIDLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified transactionAmountTitleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified transactionAmountLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified transactionStatusTitleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified transactionStatusLabel;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified transactionStatusImageView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified createdOnTitleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified createdOnLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified transactionTypeTitleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified transactionTypeLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified UpdationOnTitleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified UpdationOnLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified closeDetailsButton;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified cancelTransactionButton;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified CancelConfirmationPopUpView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified alertTitleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified alertMessageLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified noButton;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified yesButton;
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified calendarView;
@property (nonatomic, weak) IBOutlet UIDatePicker * _Null_unspecified datePicker;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified cancelDateButton;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified selectDateButton;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface HistoryViewController (SWIFT_EXTENSION(KeyboardSDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface HistoryViewController (SWIFT_EXTENSION(KeyboardSDK))
- (IBAction)showCalendarViewWithSender:(UIButton * _Nonnull)sender;
- (IBAction)loadMoreActionWithSender:(UIButton * _Nonnull)sender;
- (IBAction)closeAllPopUpViewWithSender:(UIButton * _Nonnull)sender;
- (IBAction)selectDateActionWithSender:(UIButton * _Nonnull)sender;
- (IBAction)cancelTransactionActionWithSender:(UIButton * _Nonnull)sender;
- (IBAction)YESActionWithSender:(UIButton * _Nonnull)sender;
- (IBAction)NOActionWithSender:(UIButton * _Nonnull)sender;
@end

@class UICollectionViewCell;
@class UICollectionViewLayout;

/// This view can be used as a base class for a collection view
/// that presents keyboard action buttons. You must subclass it,
/// since it returns empty cells for each action.
/// <code>KeyboardKit</code> has two built-in subclasses that you can use:
/// <code>KeyboardButtonCollectionView</code> displays buttons in a single
/// cell and <code>KeyboardButtonRowCollectionView</code> displays in rows.
SWIFT_CLASS("_TtC11KeyboardSDK22KeyboardCollectionView")
@interface KeyboardCollectionView : UICollectionView <UICollectionViewDataSource>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
@end


/// This collection view displays a single cell for each action.
/// You can customize it and its appearance in any way you want,
/// e.g. by setting a custom flow layout.
SWIFT_CLASS("_TtC11KeyboardSDK28KeyboardButtonCollectionView")
@interface KeyboardButtonCollectionView : KeyboardCollectionView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// This view has a stack view, that presents buttons in a row.
/// This view can be created with a set of actions and a button
/// creation block, which it uses to create and add buttons for
/// each provided action to a horizontal <code>buttonStackView</code>. The
/// button row can be added to the <code>KeyboardInputViewController</code>
/// <code>keyboardStackView</code>.
SWIFT_CLASS("_TtC11KeyboardSDK17KeyboardButtonRow")
@interface KeyboardButtonRow : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIScrollView;

/// This collection view displays keyboard buttons in a row.
/// This view can be created with a set of actions and a button
/// creator block. It creates and adds a button for each action
/// to a horizontal <code>buttonStackView</code>. This stack view can then
/// be added to the keyboard view controller’s main stack view.
SWIFT_CLASS("_TtC11KeyboardSDK31KeyboardButtonRowCollectionView")
@interface KeyboardButtonRowCollectionView : KeyboardCollectionView <UICollectionViewDelegate>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (NSInteger)numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end



SWIFT_CLASS("_TtC11KeyboardSDK23KeyboardCenterButtonRow")
@interface KeyboardCenterButtonRow : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@protocol UITextInput;

/// This class provides keyboards input view controllers with a
/// basic set of functionality. You can subclass this class and
/// override anything to modify the standard behavior.
/// <ul>
///   <li>
///     Use <code>keyboardActionHandler</code> to handle keyboard actions.
///   </li>
///   <li>
///     Use <code>keyboardStackView</code> to setup and populate a keyboard.
///   </li>
///   <li>
///     Use <code>addKeyboardGestures(to:)</code> to add keyboard gestures.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC11KeyboardSDK27KeyboardInputViewController")
@interface KeyboardInputViewController : UIInputViewController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)textWillChange:(id <UITextInput> _Nullable)textInput;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11KeyboardSDK28KeyboardParentViewController")
@interface KeyboardParentViewController : KeyboardInputViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)openContactAppWithNotification:(NSNotification * _Nonnull)notification;
- (void)update_PhoneNumberWithNotification:(NSNotification * _Nonnull)notification;
- (void)disable_KeyboardWithNotification:(NSNotification * _Nonnull)notification;
- (void)textDidChange:(id <UITextInput> _Nullable)textInput;
- (void)selectionWillChange:(id <UITextInput> _Nullable)textInput;
- (void)selectionDidChange:(id <UITextInput> _Nullable)textInput;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end









/// This view can be used as a horizontal space in a button row.
/// For instance, you can map the <code>.none</code> keyboard action to it,
/// so that you can declare “spaces” in your action collections.
SWIFT_CLASS("_TtC11KeyboardSDK18KeyboardSpacerView")
@interface KeyboardSpacerView : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// The implementation of XMLParserDelegate and where the lazy parsing actually happens.
SWIFT_CLASS("_TtC11KeyboardSDK13LazyXMLParser")
@interface LazyXMLParser : NSObject <NSXMLParserDelegate>
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCDATA:(NSData * _Nonnull)CDATABlock;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// This toolbar can be used to present autocomplete suggestion
/// words while the user types.
/// Since the <code>buttonCreator</code> parameter can return any view for
/// any string, you can use this class to present any views you
/// want, given any custom list of words.
SWIFT_CLASS("_TtC11KeyboardSDK10OTPToolbar")
@interface OTPToolbar : KeyboardToolbar
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11KeyboardSDK19OTPToolbarTextfield")
@interface OTPToolbarTextfield : UIView
- (void)sendAction;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This toolbar can be used to present autocomplete suggestion
/// words while the user types.
/// Since the <code>buttonCreator</code> parameter can return any view for
/// any string, you can use this class to present any views you
/// want, given any custom list of words.
SWIFT_CLASS("_TtC11KeyboardSDK10PINToolbar")
@interface PINToolbar : KeyboardToolbar
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11KeyboardSDK19PINToolbarTextfield")
@interface PINToolbarTextfield : UIView
- (void)sendAction;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This toolbar can be used to present autocomplete suggestion
/// words while the user types.
/// Since the <code>buttonCreator</code> parameter can return any view for
/// any string, you can use this class to present any views you
/// want, given any custom list of words.
SWIFT_CLASS("_TtC11KeyboardSDK12PhoneToolbar")
@interface PhoneToolbar : KeyboardToolbar
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11KeyboardSDK21PhoneToolbarTextfield")
@interface PhoneToolbarTextfield : UIView
- (void)sendAction;
- (void)selectContactAction;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITouch;
@class UIEvent;

/// This gesture recognizer will trigger a certain action, once
/// after an <code>initialDelay</code> and repeating every <code>repeatInterval</code>
/// until the user releases her/his finger. It’s a good gesture
/// to use for some keyboard actions, like <code>backspace</code>.
/// This gesture does not cancel any other gestures, so you can
/// use it together with taps and long presses.
SWIFT_CLASS("_TtC11KeyboardSDK26RepeatingGestureRecognizer")
@interface RepeatingGestureRecognizer : UIGestureRecognizer
@property (nonatomic) UIGestureRecognizerState state;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
@end



@interface RepeatingGestureRecognizer (SWIFT_EXTENSION(KeyboardSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11KeyboardSDK16SendCustomButton")
@interface SendCustomButton : UIButton
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




/// This toolbar can be used to present autocomplete suggestion
/// words while the user types.
/// Since the <code>buttonCreator</code> parameter can return any view for
/// any string, you can use this class to present any views you
/// want, given any custom list of words.
SWIFT_CLASS("_TtC11KeyboardSDK7Toolbar")
@interface Toolbar : KeyboardToolbar
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This is the default label that will be used by autocomplete
/// toolbars if no custom view builder is provided.
/// This is not a label, but a view that contains a scroll view
/// with an embedded, scrollable label, as well as a plan label
/// with centered content. The visibility of these views depend
/// on the amount of text and if the label needs scrolling.
/// <code>TODO</code> - Implement separator lines.
/// <code>TODO</code> - Implement horizontal blur.
SWIFT_CLASS("_TtC11KeyboardSDK12ToolbarLabel")
@interface ToolbarLabel : UIView
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC11KeyboardSDK24TransactionTableViewCell")
@interface TransactionTableViewCell : UITableViewCell
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified statusLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified phoneNumberLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified dateLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified amountLabel;
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end











@interface UIInputView (SWIFT_EXTENSION(KeyboardSDK)) <UIInputViewAudioFeedback>
@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible;
@end








@interface UIView (SWIFT_EXTENSION(KeyboardSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end












SWIFT_CLASS("_TtC11KeyboardSDK20contactTableViewCell")
@interface contactTableViewCell : UITableViewCell
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified contactImageView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified contactNameLabel;
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
