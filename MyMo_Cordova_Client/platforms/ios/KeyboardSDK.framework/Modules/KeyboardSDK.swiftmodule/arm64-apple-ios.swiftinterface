// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KeyboardSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AudioToolbox
import Contacts
import ContactsUI
import CoreGraphics
import CoreLocation
import Foundation
@_exported import KeyboardSDK
import Network
import Swift
import SystemConfiguration
import UIKit.UIGestureRecognizerSubclass
import UIKit.UIImage
import UIKit
import _Concurrency
import _StringProcessing
extension UIKit.UIView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension UIKit.UIView {
  public typealias TapAction = () -> Swift.Void
  @_Concurrency.MainActor(unsafe) public func addTapAction(numberOfTapsRequired: Swift.Int = 1, action: @escaping UIKit.UIView.TapAction)
  @_Concurrency.MainActor(unsafe) public func removeTapAction()
}
@objc @_Concurrency.MainActor(unsafe) public class OTPToolbar : KeyboardSDK.KeyboardToolbar {
  @_Concurrency.MainActor(unsafe) public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, buttonCreator: @escaping KeyboardSDK.OTPToolbar.ButtonCreator, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) convenience public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, textDocumentProxy: UIKit.UITextDocumentProxy, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias ButtonCreator = (Swift.String) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func reset()
  @_Concurrency.MainActor(unsafe) public func update(with suggestions: [Swift.String])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KeyboardParentViewController : KeyboardSDK.KeyboardInputViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func isKeyboardEnabled() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func initKeyboardSDK(enableMyMo: Swift.String, showSendMoney: Swift.String, showSendToATM: Swift.String, showHistory: Swift.String, applicationCode: Swift.String, senderName: Swift.String, loginID: Swift.String, Password: Swift.String, MerchantID: Swift.String, PhoneNumber: Swift.String, IdNumber: Swift.String, CustomerCode: Swift.String, CountryCode: Swift.String, CurrencyCode: Swift.String, CurrencySymbol: Swift.String, minimumAmount: Swift.String, maximumAmount: Swift.String, apiURL: Swift.String, bankUserName: Swift.String, bankBranchCode: Swift.String, bankAccountNumber: Swift.String, bankAccountType: Swift.String, additional_information: Swift.String, receiversPhoneRequired: Swift.String, receiverPhoneNumberLength: Swift.String, OTPSecurityRequired: Swift.String, PINSecurityRequired: Swift.String, PINValidationAt: Swift.String, CustomerSecurityPIN: Swift.String, CustomerSecurityPINLength: Swift.String, UIImageConfigurationDictionary: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textDidChange(_ textInput: UIKit.UITextInput?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func selectionWillChange(_ textInput: UIKit.UITextInput?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func selectionDidChange(_ textInput: UIKit.UITextInput?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UITextDocumentProxy {
  @_Concurrency.MainActor(unsafe) public func deleteBackward(times: Swift.Int)
}
extension UIKit.UIImage {
  public func copyToPasteboard(_ pasteboard: UIKit.UIPasteboard = .general) -> Swift.Bool
}
extension UIKit.UIImage {
  public static func setImageFromBundle(name: Swift.String) -> UIKit.UIImage?
}
extension UIKit.UIColor {
  public static func setColorFromBundle(name: Swift.String) -> UIKit.UIColor?
}
extension UIKit.UIView {
  public typealias RepeatingAction = (() -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func addRepeatingAction(initialDelay: Foundation.TimeInterval = 0.8, repeatInterval: Foundation.TimeInterval = 0.1, action: @escaping UIKit.UIView.RepeatingAction)
  @_Concurrency.MainActor(unsafe) public func removeRepeatingAction()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PINToolbarTextfield : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var PINTextfield: UIKit.UITextField {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(text: Swift.String, textDocumentProxy: UIKit.UITextDocumentProxy)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol KeyboardAlert {
  func alert(message: Swift.String, in view: UIKit.UIView, withDuration: Swift.Double)
}
@objc @_Concurrency.MainActor(unsafe) public class PINToolbar : KeyboardSDK.KeyboardToolbar {
  @_Concurrency.MainActor(unsafe) public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, buttonCreator: @escaping KeyboardSDK.PINToolbar.ButtonCreator, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) convenience public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, textDocumentProxy: UIKit.UITextDocumentProxy, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias ButtonCreator = (Swift.String) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func reset()
  @_Concurrency.MainActor(unsafe) public func update(with suggestions: [Swift.String])
  @objc deinit
}
extension CoreFoundation.CGFloat {
  public static var standardKeyboardRowHeight: CoreFoundation.CGFloat {
    get
  }
  public static var reducedKeyboardRowHeight: CoreFoundation.CGFloat {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static var defaultNib: UIKit.UINib {
    get
  }
  @_Concurrency.MainActor(unsafe) public static func defaultNib(in bundle: Foundation.Bundle = .main) -> UIKit.UINib
  @_Concurrency.MainActor(unsafe) public static func fromNib(owner: Any, named nibName: Swift.String = String(describing: UIView.self), in bundle: Foundation.Bundle = .main) -> Self
  @_Concurrency.MainActor(unsafe) public static func fromNibTyped<T>(owner: Any, named nibName: Swift.String = String(describing: T.self), in bundle: Foundation.Bundle = .main) -> T where T : UIKit.UIView
}
public typealias KeyboardActionRows = [KeyboardSDK.KeyboardActionRow]
extension Swift.Array where Element == [KeyboardSDK.KeyboardAction] {
  public static func from(_ characters: [[Swift.String]]) -> KeyboardSDK.KeyboardActionRows
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func applyShadow(_ shadow: KeyboardSDK.Shadow)
}
@objc @_Concurrency.MainActor(unsafe) open class RepeatingGestureRecognizer : UIKit.UIGestureRecognizer {
  @_Concurrency.MainActor(unsafe) public init(initialDelay: Foundation.TimeInterval = 0.8, repeatInterval: Foundation.TimeInterval = 0.1, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var state: UIKit.UIGestureRecognizer.State {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @objc deinit
}
extension KeyboardSDK.RepeatingGestureRecognizer : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class StandardSystemAudioPlayer : KeyboardSDK.SystemAudioPlayer {
  public func playSystemAudio(_ id: Swift.UInt32)
  @objc deinit
}
extension UIKit.UITextDocumentProxy {
  @_Concurrency.MainActor(unsafe) public var currentWord: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var currentWordPreCursorPart: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var currentWordPostCursorPart: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public func replaceCurrentWord(with replacement: Swift.String)
}
public struct AudioFeedbackConfiguration {
  public init(inputFeedback: KeyboardSDK.AudioFeedback, deleteFeedback: KeyboardSDK.AudioFeedback, systemFeedback: KeyboardSDK.AudioFeedback)
  public let inputFeedback: KeyboardSDK.AudioFeedback
  public let deleteFeedback: KeyboardSDK.AudioFeedback
  public let systemFeedback: KeyboardSDK.AudioFeedback
  public static var noFeedback: KeyboardSDK.AudioFeedbackConfiguration {
    get
  }
  public static var standard: KeyboardSDK.AudioFeedbackConfiguration {
    get
  }
}
public typealias KeyboardActionRow = [KeyboardSDK.KeyboardAction]
extension Swift.Array where Element == KeyboardSDK.KeyboardAction {
  public static func from(_ characters: [Swift.String]) -> KeyboardSDK.KeyboardActionRow
}
extension UIKit.UIColor {
  public static var clearTappable: UIKit.UIColor {
    get
  }
  convenience public init(hex: Swift.String)
}
public protocol KeyboardStackViewComponent : KeyboardSDK.VerticalKeyboardComponent {
}
extension UIKit.UIImage {
  public func tinted(with color: UIKit.UIColor, blendMode: CoreGraphics.CGBlendMode) -> UIKit.UIImage?
}
extension Swift.Sequence where Self.Element == Swift.String {
  public func uppercased() -> [Self.Iterator.Element]
}
extension Swift.Sequence where Self.Element == [Swift.String] {
  public func uppercased() -> [Self.Iterator.Element]
}
@objc @_Concurrency.MainActor(unsafe) public class PhoneToolbar : KeyboardSDK.KeyboardToolbar {
  @_Concurrency.MainActor(unsafe) public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, buttonCreator: @escaping KeyboardSDK.PhoneToolbar.ButtonCreator, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) convenience public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, textDocumentProxy: UIKit.UITextDocumentProxy, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias ButtonCreator = (Swift.String) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func reset()
  @_Concurrency.MainActor(unsafe) public func update(with suggestions: [Swift.String])
  @objc deinit
}
extension UIKit.UIView.AutoresizingMask {
  public static var centerInParent: UIKit.UIView.AutoresizingMask {
    get
  }
}
@available(*, deprecated, message: "Do not use this. Instead, make the action handler refresh autocomplete as the user types.")
public class AutocompleteBugFixTimer {
  public init(viewController: UIKit.UIInputViewController, tickInterval: Foundation.TimeInterval = 1, reversalInterval: Foundation.TimeInterval = 0.0001)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class HeaderToolbarView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var backgroundolor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(text: Swift.String, textDocumentProxy: UIKit.UITextDocumentProxy)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public var MyMoDisableLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIInputView : UIKit.UIInputViewAudioFeedback {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var enableInputClicksWhenVisible: Swift.Bool {
    @objc get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class Toolbar : KeyboardSDK.KeyboardToolbar {
  @_Concurrency.MainActor(unsafe) public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, buttonCreator: @escaping KeyboardSDK.Toolbar.ButtonCreator, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) convenience public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, textDocumentProxy: UIKit.UITextDocumentProxy, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias ButtonCreator = (Swift.String) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func reset()
  @_Concurrency.MainActor(unsafe) public func update(with suggestions: [Swift.String])
  @objc deinit
}
public typealias AutocompleteResponse = (KeyboardSDK.AutocompleteResult) -> Swift.Void
public typealias AutocompleteResult = Swift.Result<[Swift.String], Swift.Error>
public protocol AutocompleteSuggestionProvider {
  func autocompleteSuggestions(for text: Swift.String, completion: (KeyboardSDK.AutocompleteResult) -> Swift.Void)
  @available(*, deprecated, renamed: "autocompleteSuggestions(for:completion:)")
  func provideAutocompleteSuggestions(for text: Swift.String, completion: (KeyboardSDK.AutocompleteResult) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KeyboardCenterButtonRow : UIKit.UIView, KeyboardSDK.KeyboardStackViewComponent {
  @_Concurrency.MainActor(unsafe) convenience public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, actions: KeyboardSDK.KeyboardActionRow, alignment: UIKit.UIStackView.Alignment = .center, distribution: UIKit.UIStackView.Distribution = .fillProportionally, buttonCreator: (KeyboardSDK.KeyboardAction) -> (UIKit.UIView))
  public typealias KeyboardButtonCreator = (KeyboardSDK.KeyboardAction) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public var heightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var buttonStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol KeyboardToolbarComponent : KeyboardSDK.HorizontalKeyboardComponent {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KeyboardSpacerView : UIKit.UIView, KeyboardSDK.KeyboardButtonRowComponent {
  @_Concurrency.MainActor(unsafe) convenience public init(width: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public var widthConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol VerticalKeyboardComponent : UIKit.UIView {
  var heightConstraint: UIKit.NSLayoutConstraint? { get set }
}
extension KeyboardSDK.VerticalKeyboardComponent {
  public var height: CoreFoundation.CGFloat {
    get
    set
  }
}
open class ToastAlert : KeyboardSDK.KeyboardAlert {
  final public let appearance: KeyboardSDK.ToastAlert.Appearance
  public init(appearance: KeyboardSDK.ToastAlert.Appearance = Appearance())
  public struct Appearance {
    public init()
    public var backgroundColor: UIKit.UIColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var font: UIKit.UIFont
    public var horizontalPadding: CoreFoundation.CGFloat
    public var textColor: UIKit.UIColor
  }
  open func alert(message: Swift.String, in view: UIKit.UIView, withDuration duration: Swift.Double)
  open func processingView(showSpinner: Swift.Bool, in view: UIKit.UIView)
  open func transactionConfirmationView(showView: Swift.Bool, in view: UIKit.UIView)
  open func showDeviceMappingError(in view: UIKit.UIView, errorcode: Swift.String)
  open func removeSubview(_ view: UIKit.UIView, alertMessage: Swift.String, withDuration duration: Swift.Double)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class AmountToolbar : KeyboardSDK.KeyboardToolbar {
  @_Concurrency.MainActor(unsafe) public init(height: CoreFoundation.CGFloat = 100, buttonCreator: @escaping KeyboardSDK.AmountToolbar.ButtonCreator, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) convenience public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, textDocumentProxy: UIKit.UITextDocumentProxy, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias ButtonCreator = (Swift.String) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func reset()
  @_Concurrency.MainActor(unsafe) public func update(with suggestions: [Swift.String])
  @objc deinit
}
public protocol XMLIndexerDeserializable {
  static func deserialize(_ element: KeyboardSDK.XMLIndexer) throws -> Self
}
extension KeyboardSDK.XMLIndexerDeserializable {
  public static func deserialize(_ element: KeyboardSDK.XMLIndexer) throws -> Self
}
public protocol XMLElementDeserializable {
  static func deserialize(_ element: KeyboardSDK.XMLElement) throws -> Self
}
extension KeyboardSDK.XMLElementDeserializable {
  public static func deserialize(_ element: KeyboardSDK.XMLElement) throws -> Self
}
public protocol XMLAttributeDeserializable {
  static func deserialize(_ attribute: KeyboardSDK.XMLAttribute) throws -> Self
}
extension KeyboardSDK.XMLAttributeDeserializable {
  public static func deserialize(attribute: KeyboardSDK.XMLAttribute) throws -> Self
}
extension KeyboardSDK.XMLIndexer {
  public func value<T>(ofAttribute attr: Swift.String) throws -> T where T : KeyboardSDK.XMLAttributeDeserializable
  public func value<T>(ofAttribute attr: Swift.String) -> T? where T : KeyboardSDK.XMLAttributeDeserializable
  public func value<T>(ofAttribute attr: Swift.String) throws -> [T] where T : KeyboardSDK.XMLAttributeDeserializable
  public func value<T>(ofAttribute attr: Swift.String) throws -> [T]? where T : KeyboardSDK.XMLAttributeDeserializable
  public func value<T>(ofAttribute attr: Swift.String) throws -> [T?] where T : KeyboardSDK.XMLAttributeDeserializable
  public func value<T>() throws -> T where T : KeyboardSDK.XMLElementDeserializable
  public func value<T>() throws -> T? where T : KeyboardSDK.XMLElementDeserializable
  public func value<T>() throws -> [T] where T : KeyboardSDK.XMLElementDeserializable
  public func value<T>() throws -> [T]? where T : KeyboardSDK.XMLElementDeserializable
  public func value<T>() throws -> [T?] where T : KeyboardSDK.XMLElementDeserializable
  public func value<T>() throws -> T where T : KeyboardSDK.XMLIndexerDeserializable
  public func value<T>() throws -> T? where T : KeyboardSDK.XMLIndexerDeserializable
  public func value<T>() throws -> [T] where T : KeyboardSDK.XMLIndexerDeserializable
  public func value<T>() throws -> [T]? where T : KeyboardSDK.XMLIndexerDeserializable
  public func value<T>() throws -> [T?] where T : KeyboardSDK.XMLIndexerDeserializable
}
extension KeyboardSDK.XMLIndexer {
  public func value<T, A>(ofAttribute attr: A) throws -> T where T : KeyboardSDK.XMLAttributeDeserializable, A : Swift.RawRepresentable, A.RawValue == Swift.String
  public func value<T, A>(ofAttribute attr: A) -> T? where T : KeyboardSDK.XMLAttributeDeserializable, A : Swift.RawRepresentable, A.RawValue == Swift.String
  public func value<T, A>(ofAttribute attr: A) throws -> [T] where T : KeyboardSDK.XMLAttributeDeserializable, A : Swift.RawRepresentable, A.RawValue == Swift.String
  public func value<T, A>(ofAttribute attr: A) throws -> [T]? where T : KeyboardSDK.XMLAttributeDeserializable, A : Swift.RawRepresentable, A.RawValue == Swift.String
  public func value<T, A>(ofAttribute attr: A) throws -> [T?] where T : KeyboardSDK.XMLAttributeDeserializable, A : Swift.RawRepresentable, A.RawValue == Swift.String
}
extension KeyboardSDK.XMLElement {
  public func value<T>(ofAttribute attr: Swift.String) throws -> T where T : KeyboardSDK.XMLAttributeDeserializable
  public func value<T>(ofAttribute attr: Swift.String) -> T? where T : KeyboardSDK.XMLAttributeDeserializable
}
extension KeyboardSDK.XMLElement {
  public func value<T, A>(ofAttribute attr: A) throws -> T where T : KeyboardSDK.XMLAttributeDeserializable, A : Swift.RawRepresentable, A.RawValue == Swift.String
  public func value<T, A>(ofAttribute attr: A) -> T? where T : KeyboardSDK.XMLAttributeDeserializable, A : Swift.RawRepresentable, A.RawValue == Swift.String
}
public enum XMLDeserializationError : Swift.Error, Swift.CustomStringConvertible {
  case implementationIsMissing(method: Swift.String)
  case nodeIsInvalid(node: KeyboardSDK.XMLIndexer)
  case nodeHasNoValue
  case typeConversionFailed(type: Swift.String, element: KeyboardSDK.XMLElement)
  case attributeDoesNotExist(element: KeyboardSDK.XMLElement, attribute: Swift.String)
  case attributeDeserializationFailed(type: Swift.String, attribute: KeyboardSDK.XMLAttribute)
  @available(*, unavailable, renamed: "implementationIsMissing(method:)")
  public static func ImplementationIsMissing(method: Swift.String) -> KeyboardSDK.XMLDeserializationError
  @available(*, unavailable, renamed: "nodeHasNoValue(_:)")
  public static func NodeHasNoValue(_: KeyboardSDK.IndexOps) -> KeyboardSDK.XMLDeserializationError
  @available(*, unavailable, renamed: "typeConversionFailed(_:)")
  public static func TypeConversionFailed(_: KeyboardSDK.IndexingError) -> KeyboardSDK.XMLDeserializationError
  @available(*, unavailable, renamed: "attributeDoesNotExist(_:_:)")
  public static func AttributeDoesNotExist(_ attr: Swift.String, _ value: Swift.String) throws -> KeyboardSDK.XMLDeserializationError
  @available(*, unavailable, renamed: "attributeDeserializationFailed(_:_:)")
  public static func AttributeDeserializationFailed(_ attr: Swift.String, _ value: Swift.String) throws -> KeyboardSDK.XMLDeserializationError
  public var description: Swift.String {
    get
  }
}
extension Swift.String : KeyboardSDK.XMLElementDeserializable, KeyboardSDK.XMLAttributeDeserializable {
  public static func deserialize(_ element: KeyboardSDK.XMLElement) -> Swift.String
  public static func deserialize(_ attribute: KeyboardSDK.XMLAttribute) -> Swift.String
}
extension Swift.Int : KeyboardSDK.XMLElementDeserializable, KeyboardSDK.XMLAttributeDeserializable {
  public static func deserialize(_ element: KeyboardSDK.XMLElement) throws -> Swift.Int
  public static func deserialize(_ attribute: KeyboardSDK.XMLAttribute) throws -> Swift.Int
}
extension Swift.Double : KeyboardSDK.XMLElementDeserializable, KeyboardSDK.XMLAttributeDeserializable {
  public static func deserialize(_ element: KeyboardSDK.XMLElement) throws -> Swift.Double
  public static func deserialize(_ attribute: KeyboardSDK.XMLAttribute) throws -> Swift.Double
}
extension Swift.Float : KeyboardSDK.XMLElementDeserializable, KeyboardSDK.XMLAttributeDeserializable {
  public static func deserialize(_ element: KeyboardSDK.XMLElement) throws -> Swift.Float
  public static func deserialize(_ attribute: KeyboardSDK.XMLAttribute) throws -> Swift.Float
}
extension Swift.Bool : KeyboardSDK.XMLElementDeserializable, KeyboardSDK.XMLAttributeDeserializable {
  public static func deserialize(_ element: KeyboardSDK.XMLElement) throws -> Swift.Bool
  public static func deserialize(_ attribute: KeyboardSDK.XMLAttribute) throws -> Swift.Bool
}
extension UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) public var currentPageIndex: Swift.Int {
    get
    set
  }
}
public func printLog(_ items: Any...)
@objc @_Concurrency.MainActor(unsafe) public class HeaderToolbar : KeyboardSDK.KeyboardToolbar {
  @_Concurrency.MainActor(unsafe) public init(height: CoreFoundation.CGFloat = 100, buttonCreator: @escaping KeyboardSDK.HeaderToolbar.ButtonCreator, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) convenience public init(height: CoreFoundation.CGFloat = 50, textDocumentProxy: UIKit.UITextDocumentProxy, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias ButtonCreator = (Swift.String) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func reset()
  @_Concurrency.MainActor(unsafe) public func update(with suggestions: [Swift.String])
  @objc deinit
}
extension KeyboardSDK.HapticFeedback {
  public static var standardTapFeedback: KeyboardSDK.HapticFeedback {
    get
  }
  public static var standardLongPressFeedback: KeyboardSDK.HapticFeedback {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addSubview(_ subview: UIKit.UIView, fill: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func addCenterSubview(_ subview: UIKit.UIView, fill: Swift.Bool, padding: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func addTwoSubview(subview1: UIKit.UIView, subview2: UIKit.UIView, firstView_bottom_Padding: CoreFoundation.CGFloat, secondView_bottom_Padding: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func addTwoSubview(subview1: UIKit.UIView, subview2: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func addThreeSubview(subview1: UIKit.UIView, subview2: UIKit.UIView, subview3: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func addSubviewForHeader(subview1: UIKit.UIView, subview2: UIKit.UIView, subview3: UIKit.UIView, widthMultiplier: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func addTrailingSubview(_ subview: UIKit.UIView, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KeyboardButtonRow : UIKit.UIView, KeyboardSDK.KeyboardStackViewComponent {
  @_Concurrency.MainActor(unsafe) convenience public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, actions: KeyboardSDK.KeyboardActionRow, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually, buttonCreator: (KeyboardSDK.KeyboardAction) -> (UIKit.UIView))
  public typealias KeyboardButtonCreator = (KeyboardSDK.KeyboardAction) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public var heightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var buttonStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct HapticFeedbackConfiguration {
  public init(tapFeedback: KeyboardSDK.HapticFeedback, longPressFeedback: KeyboardSDK.HapticFeedback, repeatFeedback: KeyboardSDK.HapticFeedback)
  public let tapFeedback: KeyboardSDK.HapticFeedback
  public let longPressFeedback: KeyboardSDK.HapticFeedback
  public let repeatFeedback: KeyboardSDK.HapticFeedback
  public static var noFeedback: KeyboardSDK.HapticFeedbackConfiguration {
    get
  }
  public static var standard: KeyboardSDK.HapticFeedbackConfiguration {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class AutocompleteToolbar : KeyboardSDK.KeyboardToolbar {
  @_Concurrency.MainActor(unsafe) public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, buttonCreator: @escaping KeyboardSDK.AutocompleteToolbar.ButtonCreator, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) convenience public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, textDocumentProxy: UIKit.UITextDocumentProxy, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias ButtonCreator = (Swift.String) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func reset()
  @_Concurrency.MainActor(unsafe) public func update(with suggestions: [Swift.String])
  @objc deinit
}
public protocol KeyboardActionHandler : AnyObject {
  func handleTap(on action: KeyboardSDK.KeyboardAction, view: UIKit.UIView)
  func handleRepeat(on action: KeyboardSDK.KeyboardAction, view: UIKit.UIView)
  func handleLongPress(on action: KeyboardSDK.KeyboardAction, view: UIKit.UIView)
}
public enum KeyboardType : Swift.Equatable {
  case alphabetic(uppercased: Swift.Bool), numeric, symbolic, email, emojis, images, custom(_: Swift.String)
  public static func == (a: KeyboardSDK.KeyboardType, b: KeyboardSDK.KeyboardType) -> Swift.Bool
}
extension UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public func addArrangedSubviews(_ subviews: [UIKit.UIView])
  @_Concurrency.MainActor(unsafe) public func removeArrangedSubviews(_ subviews: [UIKit.UIView])
  @_Concurrency.MainActor(unsafe) public func removeAllArrangedSubviews()
}
extension Swift.Array {
  public func appending(_ newElement: Element) -> Swift.Array<Element>
}
public protocol SystemAudioPlayer {
  func playSystemAudio(_ id: Swift.UInt32)
}
public enum KeyboardShiftState {
  case lowercased, uppercased, capsLocked
  public static func == (a: KeyboardSDK.KeyboardShiftState, b: KeyboardSDK.KeyboardShiftState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension KeyboardSDK.KeyboardShiftState {
  public var isUppercased: Swift.Bool {
    get
  }
}
@objc open class StandardKeyboardActionHandler : ObjectiveC.NSObject, KeyboardSDK.KeyboardActionHandler {
  public init(inputViewController: UIKit.UIInputViewController, hapticConfiguration: KeyboardSDK.HapticFeedbackConfiguration = .noFeedback, audioConfiguration: KeyboardSDK.AudioFeedbackConfiguration = .standard)
  weak public var inputViewController: UIKit.UIInputViewController? {
    get
  }
  public var textDocumentProxy: UIKit.UITextDocumentProxy? {
    get
  }
  public typealias GestureAction = (() -> Swift.Void)
  open func action(for gesture: KeyboardSDK.KeyboardGesture, action: KeyboardSDK.KeyboardAction, view: UIKit.UIView) -> KeyboardSDK.StandardKeyboardActionHandler.GestureAction?
  open func longPressAction(for action: KeyboardSDK.KeyboardAction, view: UIKit.UIView) -> KeyboardSDK.StandardKeyboardActionHandler.GestureAction?
  open func repeatAction(for action: KeyboardSDK.KeyboardAction, view: UIKit.UIView) -> KeyboardSDK.StandardKeyboardActionHandler.GestureAction?
  open func tapAction(for action: KeyboardSDK.KeyboardAction, view: UIKit.UIView) -> KeyboardSDK.StandardKeyboardActionHandler.GestureAction?
  open func handle(_ gesture: KeyboardSDK.KeyboardGesture, on action: KeyboardSDK.KeyboardAction, view: UIKit.UIView)
  open func handleLongPress(on action: KeyboardSDK.KeyboardAction, view: UIKit.UIView)
  open func handleRepeat(on action: KeyboardSDK.KeyboardAction, view: UIKit.UIView)
  open func handleTap(on action: KeyboardSDK.KeyboardAction, view: UIKit.UIView)
  open func animationButtonTap(for view: UIKit.UIView)
  open func triggerAudioFeedback(for action: KeyboardSDK.KeyboardAction)
  open func triggerHapticFeedback(for gesture: KeyboardSDK.KeyboardGesture, on action: KeyboardSDK.KeyboardAction)
  @available(*, deprecated, message: "Use configuration-based init instead")
  public init(inputViewController: UIKit.UIInputViewController, tapHapticFeedback: KeyboardSDK.HapticFeedback = .none, longPressHapticFeedback: KeyboardSDK.HapticFeedback = .none, repeatHapticFeedback: KeyboardSDK.HapticFeedback = .none)
  @available(*, deprecated, message: "Use triggerHapticFeedback(for:on:) instead")
  open func giveHapticFeedbackForLongPress(on action: KeyboardSDK.KeyboardAction)
  @available(*, deprecated, message: "Use triggerHapticFeedback(for:on:) instead")
  open func giveHapticFeedbackForRepeat(on action: KeyboardSDK.KeyboardAction)
  @available(*, deprecated, message: "Use triggerHapticFeedback(for:on:) instead")
  open func giveHapticFeedbackForTap(on action: KeyboardSDK.KeyboardAction)
  @objc deinit
}
extension UIKit.UIInputViewController {
  @available(*, deprecated, message: "Do not use this. Instead, make the action handler refresh autocomplete as the user types.")
  @_Concurrency.MainActor(unsafe) public func createAutocompleteBugFixTimer(withTickInterval tickInterval: Foundation.TimeInterval = 1, reversalInterval: Foundation.TimeInterval = 0.0001) -> KeyboardSDK.AutocompleteBugFixTimer
}
@_hasMissingDesignatedInitializers public class SWXMLHashOptions {
  public var shouldProcessLazily: Swift.Bool
  public var shouldProcessNamespaces: Swift.Bool
  public var caseInsensitive: Swift.Bool
  public var encoding: Swift.String.Encoding
  public var userInfo: [Swift.CodingUserInfoKey : Any]
  public var detectParsingErrors: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SWXMLHash {
  public class func config(_ configAction: (KeyboardSDK.SWXMLHashOptions) -> Swift.Void) -> KeyboardSDK.SWXMLHash
  public func parse(_ xml: Swift.String) -> KeyboardSDK.XMLIndexer
  public func parse(_ data: Foundation.Data) -> KeyboardSDK.XMLIndexer
  public class func parse(_ xml: Swift.String) -> KeyboardSDK.XMLIndexer
  public class func parse(_ data: Foundation.Data) -> KeyboardSDK.XMLIndexer
  public class func lazy(_ xml: Swift.String) -> KeyboardSDK.XMLIndexer
  public class func lazy(_ data: Foundation.Data) -> KeyboardSDK.XMLIndexer
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IndexOp {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IndexOps {
  @objc deinit
}
public struct ParsingError : Swift.Error {
  public let line: Swift.Int
  public let column: Swift.Int
}
public enum IndexingError : Swift.Error {
  case attribute(attr: Swift.String)
  case attributeValue(attr: Swift.String, value: Swift.String)
  case key(key: Swift.String)
  case index(idx: Swift.Int)
  case initialize(instance: Swift.AnyObject)
  case encoding
  case error
  @available(*, unavailable, renamed: "attribute(attr:)")
  public static func Attribute(attr: Swift.String) -> KeyboardSDK.IndexingError
  @available(*, unavailable, renamed: "attributeValue(attr:value:)")
  public static func AttributeValue(attr: Swift.String, value: Swift.String) -> KeyboardSDK.IndexingError
  @available(*, unavailable, renamed: "key(key:)")
  public static func Key(key: Swift.String) -> KeyboardSDK.IndexingError
  @available(*, unavailable, renamed: "index(idx:)")
  public static func Index(idx: Swift.Int) -> KeyboardSDK.IndexingError
  @available(*, unavailable, renamed: "initialize(instance:)")
  public static func Init(instance: Swift.AnyObject) -> KeyboardSDK.IndexingError
  @available(*, unavailable, renamed: "error")
  public static var Error: KeyboardSDK.IndexingError {
    get
  }
}
public enum XMLIndexer {
  case element(KeyboardSDK.XMLElement)
  case list([KeyboardSDK.XMLElement])
  case stream(KeyboardSDK.IndexOps)
  case xmlError(KeyboardSDK.IndexingError)
  case parsingError(KeyboardSDK.ParsingError)
  @available(*, unavailable, renamed: "element(_:)")
  public static func Element(_: KeyboardSDK.XMLElement) -> KeyboardSDK.XMLIndexer
  @available(*, unavailable, renamed: "list(_:)")
  public static func List(_: [KeyboardSDK.XMLElement]) -> KeyboardSDK.XMLIndexer
  @available(*, unavailable, renamed: "stream(_:)")
  public static func Stream(_: KeyboardSDK.IndexOps) -> KeyboardSDK.XMLIndexer
  @available(*, unavailable, renamed: "xmlError(_:)")
  public static func XMLError(_: KeyboardSDK.IndexingError) -> KeyboardSDK.XMLIndexer
  @available(*, unavailable, renamed: "withAttribute(_:_:)")
  public static func withAttr(_ attr: Swift.String, _ value: Swift.String) throws -> KeyboardSDK.XMLIndexer
  public var element: KeyboardSDK.XMLElement? {
    get
  }
  public var all: [KeyboardSDK.XMLIndexer] {
    get
  }
  public var children: [KeyboardSDK.XMLIndexer] {
    get
  }
  @available(*, unavailable, renamed: "filterChildren(_:)")
  public func filter(_ included: (_ elem: KeyboardSDK.XMLElement, _ index: Swift.Int) -> Swift.Bool) -> KeyboardSDK.XMLIndexer
  public func filterChildren(_ included: (_ elem: KeyboardSDK.XMLElement, _ index: Swift.Int) -> Swift.Bool) -> KeyboardSDK.XMLIndexer
  public func filterAll(_ included: (_ elem: KeyboardSDK.XMLElement, _ index: Swift.Int) -> Swift.Bool) -> KeyboardSDK.XMLIndexer
  public var userInfo: [Swift.CodingUserInfoKey : Any] {
    get
  }
  public func withAttribute(_ attr: Swift.String, _ value: Swift.String) throws -> KeyboardSDK.XMLIndexer
  public init(_ rawObject: Swift.AnyObject) throws
  public init(_ elem: KeyboardSDK.XMLElement)
  public func byKey(_ key: Swift.String) throws -> KeyboardSDK.XMLIndexer
  public subscript(key: Swift.String) -> KeyboardSDK.XMLIndexer {
    get
  }
  public func byIndex(_ index: Swift.Int) throws -> KeyboardSDK.XMLIndexer
  public subscript(index: Swift.Int) -> KeyboardSDK.XMLIndexer {
    get
  }
}
extension KeyboardSDK.XMLIndexer : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension KeyboardSDK.IndexingError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol XMLContent : Swift.CustomStringConvertible {
}
@_hasMissingDesignatedInitializers public class TextElement : KeyboardSDK.XMLContent {
  final public let text: Swift.String
  @objc deinit
}
public struct XMLAttribute {
  public let name: Swift.String
  public let text: Swift.String
}
@_hasMissingDesignatedInitializers public class XMLElement : KeyboardSDK.XMLContent {
  final public let name: Swift.String
  public var caseInsensitive: Swift.Bool {
    get
  }
  public var allAttributes: [Swift.String : KeyboardSDK.XMLAttribute]
  public func attribute(by name: Swift.String) -> KeyboardSDK.XMLAttribute?
  public var text: Swift.String {
    get
  }
  public var recursiveText: Swift.String {
    get
  }
  public var innerXML: Swift.String {
    get
  }
  public var children: [KeyboardSDK.XMLContent]
  @objc deinit
}
extension KeyboardSDK.TextElement : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension KeyboardSDK.XMLAttribute : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension KeyboardSDK.XMLElement : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension KeyboardSDK.SWXMLHash {
  public typealias XMLElement = KeyboardSDK.SWXMLHashXMLElement
}
public typealias SWXMLHashXMLElement = KeyboardSDK.XMLElement
extension KeyboardSDK.XMLIndexer {
  public func withAttribute<A, V>(_ attr: A, _ value: V) throws -> KeyboardSDK.XMLIndexer where A : Swift.RawRepresentable, V : Swift.RawRepresentable, A.RawValue == Swift.String, V.RawValue == Swift.String
  public func byKey<K>(_ key: K) throws -> KeyboardSDK.XMLIndexer where K : Swift.RawRepresentable, K.RawValue == Swift.String
  public subscript<K>(key: K) -> KeyboardSDK.XMLIndexer where K : Swift.RawRepresentable, K.RawValue == Swift.String {
    get
  }
}
extension KeyboardSDK.XMLElement {
  public func attribute<N>(by name: N) -> KeyboardSDK.XMLAttribute? where N : Swift.RawRepresentable, N.RawValue == Swift.String
}
public enum HapticFeedback : Swift.CaseIterable {
  case error, success, warning, lightImpact, mediumImpact, heavyImpact, selectionChanged, none
  public static func == (a: KeyboardSDK.HapticFeedback, b: KeyboardSDK.HapticFeedback) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [KeyboardSDK.HapticFeedback]
  public static var allCases: [KeyboardSDK.HapticFeedback] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension KeyboardSDK.HapticFeedback {
  public func prepare()
  public static func prepare(_ feedback: KeyboardSDK.HapticFeedback)
  public func trigger()
  public static func trigger(_ feedback: KeyboardSDK.HapticFeedback)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PhoneToolbarTextfield : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var PhoneNoTextfield: UIKit.UITextField {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(text: Swift.String, textDocumentProxy: UIKit.UITextDocumentProxy)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum AudioFeedback : Swift.Equatable {
  case input, system, delete, custom(id: Swift.UInt32), none
  public var systemId: Swift.UInt32? {
    get
  }
  public static var systemPlayer: KeyboardSDK.SystemAudioPlayer
  public static func == (a: KeyboardSDK.AudioFeedback, b: KeyboardSDK.AudioFeedback) -> Swift.Bool
}
extension KeyboardSDK.AudioFeedback {
  public func trigger()
  public static func trigger(_ feedback: KeyboardSDK.AudioFeedback)
}
extension UIKit.UIImage {
  public func saveToPhotos(completionTarget: Swift.AnyObject?, completionSelector: ObjectiveC.Selector?)
}
@objc @_Concurrency.MainActor(unsafe) open class KeyboardToolbar : UIKit.UIView, KeyboardSDK.KeyboardStackViewComponent {
  @_Concurrency.MainActor(unsafe) public init(height: CoreFoundation.CGFloat = .standardKeyboardRowHeight, alignment: UIKit.UIStackView.Alignment = .fill, distribution: UIKit.UIStackView.Distribution = .fillEqually)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var heightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var stackView: UIKit.UIStackView {
    get
    set
  }
  @objc deinit
}
public protocol KeyboardButton : KeyboardSDK.KeyboardButtonRowComponent {
  var action: KeyboardSDK.KeyboardAction { get }
  var secondaryAction: KeyboardSDK.KeyboardAction? { get }
}
extension KeyboardSDK.KeyboardButton {
  public func animateStandardPress(factor: CoreFoundation.CGFloat = 1.18, completion: (() -> Swift.Void)? = nil)
  public func animateStandardRelease(completion: (() -> Swift.Void)? = nil)
  public func animateStandardTap(completion: (() -> Swift.Void)? = nil)
}
public enum KeyboardAction : Swift.Equatable {
  case none, backspace, capsLock, character(Swift.String), command, custom(name: Swift.String), dismissKeyboard, escape, function, image(description: Swift.String, keyboardImageName: Swift.String, imageName: Swift.String), moveCursorBackward, moveCursorForward, newLine, option, shift, shiftDown, space, switchKeyboard, switchToKeyboard(KeyboardSDK.KeyboardType), tab
  public static func == (a: KeyboardSDK.KeyboardAction, b: KeyboardSDK.KeyboardAction) -> Swift.Bool
}
extension KeyboardSDK.KeyboardAction {
  public func popupCharacterOptions() -> [Swift.String]
  public func longPressCharacter() -> KeyboardSDK.KeyboardAction
  public func test() -> KeyboardSDK.KeyboardAction
  public func pressSpecialCharacter(Amount: Swift.String, ResponseURLString: Swift.String) -> KeyboardSDK.KeyboardAction
  public var getNumberString: Swift.String {
    get
  }
  public var getImageDescription: Swift.String {
    get
  }
  public func returnEmpty() -> KeyboardSDK.KeyboardAction
  public var isSend: Swift.Bool {
    get
  }
  public var isHistory: Swift.Bool {
    get
  }
  public var isInputAction: Swift.Bool {
    get
  }
  public var isDeleteAction: Swift.Bool {
    get
  }
  public var isNonTappable: Swift.Bool {
    get
  }
  public var isSystemAction: Swift.Bool {
    get
  }
  public var standardInputViewControllerAction: ((UIKit.UIInputViewController?) -> Swift.Void)? {
    get
  }
  public var standardTextDocumentProxyAction: ((UIKit.UITextDocumentProxy?) -> Swift.Void)? {
    get
  }
}
extension UIKit.UIView {
  public typealias LongPressAction = (() -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func addLongPressAction(action: @escaping UIKit.UIView.LongPressAction)
  @_Concurrency.MainActor(unsafe) public func removeLongPressAction()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AutocompleteToolbarLabel : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) convenience public init(text: Swift.String, textDocumentProxy: UIKit.UITextDocumentProxy)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textMargins: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var centeredLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scrollViewLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var separator: KeyboardSDK.AutocompleteToolbarSeparator {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func scrollToEndIfNeeded()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension KeyboardSDK.AutocompleteToolbarLabel {
  @_Concurrency.MainActor(unsafe) public func setup()
  @_Concurrency.MainActor(unsafe) public func setupSubviews()
  @_Concurrency.MainActor(unsafe) public func setupSubview(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func setupTapAction()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class OTPToolbarTextfield : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var OTPTextfield: UIKit.UITextField {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(text: Swift.String, textDocumentProxy: UIKit.UITextDocumentProxy)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KeyboardInputViewController : UIKit.UIInputViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func viewWillSyncWithTextDocumentProxy()
  @_Concurrency.MainActor(unsafe) open var keyboardActionHandler: KeyboardSDK.KeyboardActionHandler {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyboardStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var keyboardCenterStackView: UIKit.UIStackView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func addKeyboardGestures(to button: KeyboardSDK.KeyboardButton)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textWillChange(_ textInput: UIKit.UITextInput?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ToolbarLabel : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) convenience public init(text: Swift.String, textDocumentProxy: UIKit.UITextDocumentProxy)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textMargins: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var centeredLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scrollViewLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension KeyboardSDK.ToolbarLabel {
  @_Concurrency.MainActor(unsafe) public func setup()
  @_Concurrency.MainActor(unsafe) public func setupSubviews()
  @_Concurrency.MainActor(unsafe) public func setupSubview(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func setupTapAction()
}
@objc @_Concurrency.MainActor(unsafe) open class KeyboardButtonRowCollectionView : KeyboardSDK.KeyboardCollectionView, KeyboardSDK.PagedKeyboardComponent, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) public init(id: Swift.String = "KeyboardButtonRowCollectionView", actions: [KeyboardSDK.KeyboardAction], configuration: KeyboardSDK.KeyboardButtonRowCollectionView.Configuration, buttonCreator: @escaping KeyboardSDK.KeyboardButtonRowCollectionView.KeyboardButtonCreator)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func restoreCurrentPage()
  public typealias KeyboardButtonCreator = (KeyboardSDK.KeyboardAction) -> (UIKit.UIView)
  public struct Configuration {
    public init(rowHeight: CoreFoundation.CGFloat, rowsPerPage: Swift.Int, buttonsPerRow: Swift.Int)
    public let rowHeight: CoreFoundation.CGFloat
    public let rowsPerPage: Swift.Int
    public let buttonsPerRow: Swift.Int
    public let pageSize: Swift.Int
    public var totalHeight: CoreFoundation.CGFloat {
      get
    }
    public static var empty: KeyboardSDK.KeyboardButtonRowCollectionView.Configuration {
      get
    }
  }
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Layout : UIKit.UICollectionViewFlowLayout {
    @_Concurrency.MainActor(unsafe) @objc override dynamic public func invalidateLayout()
    @_Concurrency.MainActor(unsafe) final public let rowHeight: CoreFoundation.CGFloat
    @objc deinit
  }
  @_Concurrency.MainActor(unsafe) final public let id: Swift.String
  @_Concurrency.MainActor(unsafe) final public let configuration: KeyboardSDK.KeyboardButtonRowCollectionView.Configuration
  @_Concurrency.MainActor(unsafe) final public let rows: KeyboardSDK.KeyboardActionRows
  @_Concurrency.MainActor(unsafe) open var canPersistPageIndex: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var canRestorePageIndex: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var numberOfPages: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) open func row(at indexPath: Foundation.IndexPath) -> KeyboardSDK.KeyboardActionRow
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func numberOfItems(inSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) open func collectionView(_ collectionView: UIKit.UICollectionView, rowViewForItemAt indexPath: Foundation.IndexPath) -> KeyboardSDK.KeyboardButtonRow
  @_Concurrency.MainActor(unsafe) @objc open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class KeyboardCollectionView : UIKit.UICollectionView, KeyboardSDK.KeyboardStackViewComponent, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) public init(actions: [KeyboardSDK.KeyboardAction])
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public let actions: [KeyboardSDK.KeyboardAction]
  @_Concurrency.MainActor(unsafe) final public let cellIdentifier: Swift.String
  @_Concurrency.MainActor(unsafe) public var heightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) open func refresh()
  @_Concurrency.MainActor(unsafe) @objc open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc deinit
}
public enum KeyboardSetting : Swift.String {
  case currentPageIndex
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension KeyboardSDK.KeyboardSetting {
  public var key: Swift.String {
    get
  }
  public func key(for id: Swift.String) -> Swift.String
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KeyboardButtonView : UIKit.UIButton, KeyboardSDK.KeyboardButton {
  @_Concurrency.MainActor(unsafe) public var action: KeyboardSDK.KeyboardAction {
    get
  }
  @_Concurrency.MainActor(unsafe) public var secondaryAction: KeyboardSDK.KeyboardAction? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var keyboardAppearance: UIKit.UIKeyboardAppearance {
    get
  }
  @_Concurrency.MainActor(unsafe) public var widthConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func setup(with action: KeyboardSDK.KeyboardAction, secondaryAction: KeyboardSDK.KeyboardAction? = nil, in viewController: KeyboardSDK.KeyboardInputViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIImage {
  public func resized(to newSize: CoreFoundation.CGSize) -> UIKit.UIImage?
  public func resized(toHeight points: CoreFoundation.CGFloat) -> UIKit.UIImage?
  public func resized(toWidth points: CoreFoundation.CGFloat) -> UIKit.UIImage?
}
public struct Shadow {
  public init(alpha: Swift.Float, blur: CoreFoundation.CGFloat, color: UIKit.UIColor = .black, spread: CoreFoundation.CGFloat = 0, x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  public let alpha: Swift.Float
  public let blur: CoreFoundation.CGFloat
  public let color: UIKit.UIColor
  public let spread: CoreFoundation.CGFloat
  public let x: CoreFoundation.CGFloat
  public let y: CoreFoundation.CGFloat
  public static var standardButtonShadow: KeyboardSDK.Shadow {
    get
  }
}
public protocol KeyboardButtonRowComponent : KeyboardSDK.HorizontalKeyboardComponent {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AmountToolbarLabel : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) convenience public init(text: Swift.String, textDocumentProxy: UIKit.UITextDocumentProxy)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textMargins: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var amountLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var scrollViewLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension KeyboardSDK.AmountToolbarLabel {
  @_Concurrency.MainActor(unsafe) public func setup()
  @_Concurrency.MainActor(unsafe) public func setupSubviews()
  @_Concurrency.MainActor(unsafe) public func setupSubview(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func setupTapAction()
}
extension Swift.Sequence {
  public func batched(withBatchSize size: Swift.Int) -> [[Self.Iterator.Element]]
}
public protocol PagedKeyboardComponent : UIKit.UIView {
  var id: Swift.String { get }
  var canPersistPageIndex: Swift.Bool { get }
  var canRestorePageIndex: Swift.Bool { get }
  var currentPageIndex: Swift.Int { get set }
  var numberOfPages: Swift.Int { get }
}
extension KeyboardSDK.PagedKeyboardComponent {
  public func persistCurrentPageIndex()
  public func restoreCurrentPageIndex()
}
public enum KeyboardGesture {
  case tap
  case longPress
  case repeatPress
  public static func == (a: KeyboardSDK.KeyboardGesture, b: KeyboardSDK.KeyboardGesture) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol HorizontalKeyboardComponent : UIKit.UIView {
  var widthConstraint: UIKit.NSLayoutConstraint? { get set }
}
extension KeyboardSDK.HorizontalKeyboardComponent {
  public var width: CoreFoundation.CGFloat {
    get
    set
  }
}
@objc @_Concurrency.MainActor(unsafe) open class KeyboardButtonCollectionView : KeyboardSDK.KeyboardCollectionView {
  @_Concurrency.MainActor(unsafe) public init(actions: [KeyboardSDK.KeyboardAction], buttonCreator: @escaping KeyboardSDK.KeyboardButtonCollectionView.KeyboardButtonCreator)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public typealias KeyboardButtonCreator = (KeyboardSDK.KeyboardAction) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) open func action(at indexPath: Foundation.IndexPath) -> KeyboardSDK.KeyboardAction
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc deinit
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPad5, iPad6, iPad7, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, AppleTV, AppleTV_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AutocompleteToolbarSeparator : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toWindow window: UIKit.UIWindow?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension KeyboardSDK.HapticFeedback : Swift.Equatable {}
extension KeyboardSDK.HapticFeedback : Swift.Hashable {}
extension KeyboardSDK.KeyboardShiftState : Swift.Equatable {}
extension KeyboardSDK.KeyboardShiftState : Swift.Hashable {}
extension KeyboardSDK.KeyboardSetting : Swift.Equatable {}
extension KeyboardSDK.KeyboardSetting : Swift.Hashable {}
extension KeyboardSDK.KeyboardSetting : Swift.RawRepresentable {}
extension KeyboardSDK.KeyboardGesture : Swift.Equatable {}
extension KeyboardSDK.KeyboardGesture : Swift.Hashable {}
extension KeyboardSDK.Model : Swift.Equatable {}
extension KeyboardSDK.Model : Swift.Hashable {}
extension KeyboardSDK.Model : Swift.RawRepresentable {}
